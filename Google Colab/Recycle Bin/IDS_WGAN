{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"IDS_WGAN","provenance":[],"collapsed_sections":[],"toc_visible":true,"mount_file_id":"135b6uySbF2AcKo0_8Lx_j12sMTbkpdqI","authorship_tag":"ABX9TyOzmgXfcduOgcAjBuryC9GV"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"HfVbgm_IdnMH","colab_type":"text"},"source":["# **0. Một số biến toàn cục**"]},{"cell_type":"markdown","metadata":{"id":"3rFWSSBQF99E","colab_type":"text"},"source":["##**0.1 Paths**"]},{"cell_type":"code","metadata":{"id":"uW-RHzMwdsG5","colab_type":"code","colab":{}},"source":["# Modules Path\n","ModulePath = \"/content/drive/My Drive/Study/KLTN/Python Modules/\"\n","\n","# Dataset Path\n","DatasetPath = \"/content/drive/My Drive/Study/KLTN/Dataset/\"\n","ProcessedDatasetPath = DatasetPath + \"/NSL-KDD-TM/Attack-type Labels/SEPARATED/\"\n","\n","\n","g_trainset_path = ProcessedDatasetPath + \"GTrain_label_normalized_all.csv\"\n","d_trainset_path = ProcessedDatasetPath + \"DTrain_label_normalized_all.csv\"\n","\n","# Testset\n","test_dataset_path = DatasetPath + \"NSL-KDD-TM/Attack-type Labels/PREPROCESSED/KDDTest+_label_normalized_all.csv\"\n","\n","# Saved Models Path\n","SavedModelPath = \"/content/drive/My Drive/Study/KLTN/Saved Model/\"\n","\n","# GAN\n","GAN_SavedModelPath = SavedModelPath + \"GANModel/Separated Dataset/\"\n","\n","# Blackbox IDS\n","# IDS_ModelPath = SavedModelPath + \"IDSModel/IDS_2020.05.22-13.49.pth\"\n","IDS_DOS_ModelPath = SavedModelPath + \"IDSModel/Separated Dataset/IDS_DOS-2020.06.04-16.44.pth\"\n","# IDS_U2R_AND_R2L_ModelPath = SavedModelPath + \"IDSModel/Separated Dataset/IDS_U2R_AND_R2L-2020.06.01-17.02.pth\""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XwTYqTdfF-wS","colab_type":"text"},"source":["##**0.2 Variables**"]},{"cell_type":"code","metadata":{"id":"8rBB0NLwGAce","colab_type":"code","colab":{}},"source":["# Choose Attack Category\n","ATTACK_CATEGORY = 'DOS'"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"DZkqASdBS-QA","colab_type":"text"},"source":["#**1. Chuẩn bị**"]},{"cell_type":"markdown","metadata":{"id":"m27n3nFSTSv2","colab_type":"text"},"source":["##1.1 Import thư viện"]},{"cell_type":"markdown","metadata":{"id":"08Q42YHGbvLT","colab_type":"text"},"source":["###1.1.1. Cài đặt các thư viện cần thiết"]},{"cell_type":"code","metadata":{"id":"u7ZZvZaAbM1J","colab_type":"code","outputId":"5d070e6b-c55d-4db3-9478-b7d24cfe5ee6","executionInfo":{"status":"ok","timestamp":1591264577335,"user_tz":-420,"elapsed":8724,"user":{"displayName":"Tien LE KHAC","photoUrl":"","userId":"18298916241916904857"}},"colab":{"base_uri":"https://localhost:8080/","height":459}},"source":["!pip3 install numpy adabound torc sklearn matplotlib pandas"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages (1.18.4)\n","Collecting adabound\n","  Downloading https://files.pythonhosted.org/packages/cd/44/0c2c414effb3d9750d780b230dbb67ea48ddc5d9a6d7a9b7e6fcc6bdcff9/adabound-0.0.5-py3-none-any.whl\n","Collecting torc\n","  Downloading https://files.pythonhosted.org/packages/fb/e0/b8711907b9b392aab87d7213f18062396243c4e6010075924471e5b371fb/torc-0.1.0.tar.gz\n","Requirement already satisfied: sklearn in /usr/local/lib/python3.6/dist-packages (0.0)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.6/dist-packages (3.2.1)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.6/dist-packages (1.0.4)\n","Requirement already satisfied: torch>=0.4.0 in /usr/local/lib/python3.6/dist-packages (from adabound) (1.5.0+cu101)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.6/dist-packages (from sklearn) (0.22.2.post1)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.6/dist-packages (from matplotlib) (0.10.0)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib) (2.4.7)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib) (2.8.1)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib) (1.2.0)\n","Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.6/dist-packages (from pandas) (2018.9)\n","Requirement already satisfied: future in /usr/local/lib/python3.6/dist-packages (from torch>=0.4.0->adabound) (0.16.0)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.6/dist-packages (from scikit-learn->sklearn) (0.15.1)\n","Requirement already satisfied: scipy>=0.17.0 in /usr/local/lib/python3.6/dist-packages (from scikit-learn->sklearn) (1.4.1)\n","Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from cycler>=0.10->matplotlib) (1.12.0)\n","Building wheels for collected packages: torc\n","  Building wheel for torc (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for torc: filename=torc-0.1.0-cp36-none-any.whl size=10362 sha256=f1ad688ed502e2e1e2ec85352580e3359d6b536d0a725caf74eb87e6fc8f877e\n","  Stored in directory: /root/.cache/pip/wheels/20/73/48/8cf854ddc8ee6521dfe27f44d45f91a12f4ecbde3e9880b3f1\n","Successfully built torc\n","Installing collected packages: adabound, torc\n","Successfully installed adabound-0.0.5 torc-0.1.0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"mt5O3Y-fb5Du","colab_type":"text"},"source":["###1.1.2. Import thư viện"]},{"cell_type":"code","metadata":{"id":"ONDkO5xKdjqa","colab_type":"code","colab":{}},"source":["# Add Module Path - To Import Custom Modules\n","import sys\n","sys.path.append(ModulePath)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"YIQ708lZS2lF","colab_type":"code","colab":{}},"source":["import numpy as np\n","import pandas as pd\n","import torch as th\n","from torch.autograd import Variable as V\n","import torch.autograd as autograd\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim\n","from sklearn.utils import shuffle\n","from models import Blackbox_IDS, Generator, Discriminator\n","from constants import *\n","\n","import matplotlib.pyplot as plt\n","import adabound \n","import math\n","from datetime import datetime\n","import pytz\n","\n","# Define HCM Timezone\n","time_zone = pytz.timezone('Asia/Ho_Chi_Minh')"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3Ljsym5CVV0f","colab_type":"text"},"source":["##1.2 Định nghĩa hàm tiền tạo Batch"]},{"cell_type":"markdown","metadata":{"id":"Fx9YxoggWOY2","colab_type":"text"},"source":["###1.2.1 Tạo Batch"]},{"cell_type":"code","metadata":{"id":"wA-LxbnzWXyS","colab_type":"code","colab":{}},"source":["# Hàm tạo Batch\n","def create_batch2(x,batch_size):\n","    # Comment - a là danh sách các số từ 0 -> len(x)\n","    a = list(range(len(x)))\n","\n","    # Comment - Xáo trộn a lên, đảo lộn vị trí các phần từ của a\n","    np.random.shuffle(a)\n","\n","    # Comment - Xáo trộn các phần tử trong x\n","    x = x[a]\n","\n","    # Comment - Mảng các batch, mỗi batch có số phần tử là batch size\n","    batch_x = [x[batch_size * i : (i+1)*batch_size,:] for i in range(len(x)//batch_size)]\n","    \n","    return batch_x"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xNK9nlNgWPvJ","colab_type":"text"},"source":["###1.2.2 Tiền xử lý dữ liệu"]},{"cell_type":"code","metadata":{"id":"iwpT6Jm8WRTb","colab_type":"code","colab":{}},"source":["# Hàm tiền xử lý dữ liệu tấn công\n","def preprocess_malicious_data(dataset, attack_category):\n","    # 2 Category: DoS, U2R&R2L\n","    if attack_category != 'DOS' and attack_category != 'U2R_AND_R2L':\n","      print(f\"Preprocess Data Fail: Invalid Attack Category\")\n","\n","    if attack_category == 'DOS':\n","      # DOS \n","      attack_data = dataset[dataset['class'].isin(DOS)]\n","    else:\n","      # U2R_AND_R2L\n","      attack_data = dataset[dataset['class'].isin(U2R_AND_R2L)]\n","\n","    # Del label\n","    del attack_data[\"class\"]\n","\n","    return np.array(attack_data)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"eKp_B9PvboG_","colab_type":"text"},"source":["###1.2.3 Hàm tạo Noise\n","  - **DOS**: \n","    - **Giữ lại**: Intrinsic, Time-based traffic.\n","    - **Thay đổi**: Content, Host-based traffic.\n","  - **U2R&R2L**:\n","    - **Giữ lại**: Intrinsic, Content.\n","    - **Thay đổi**: Time-based traffic, Host-based traffic."]},{"cell_type":"code","metadata":{"id":"idpQZ6kCfBrO","colab_type":"code","colab":{}},"source":["# Make Noise\n","def MakeNoise(attack_category, n_feature, n_record):\n","    if attack_category != 'DOS' and attack_category != 'U2R_AND_R2L':\n","      print(f\"Preprocess Data Fail: Invalid Attack Category\")\n","      return np.zeros((n_feature, n_record))\n","\n","    # Create noise array\n","    noise = np.random.uniform(-1,1,(n_feature,n_record))\n","\n","    # retain feature\n","    # DOS : INTRINSIC, TIMEBASED\n","    if attack_category == 'DOS':\n","      noise[:, INTRINSIC_INDEX + TIMEBASED_INDEX] = 0\n","    else:\n","      # U2R&R2L: INTRINSIC, CONTENT\n","      noise[:, INTRINSIC_INDEX + CONTENT_INDEX] = 0\n","    \n","    return noise"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"M2JNctu-4vdR","colab_type":"text"},"source":["###1.2.4 Hàm restrict the output \n","To restrict the output elements into the range of [0; 1]:  \n","- the element which is above 1 is set as 1\n","- the element which is below 0 is set as 0"]},{"cell_type":"code","metadata":{"id":"7bamdxCm49Np","colab_type":"code","colab":{}},"source":["def RestrictOutput(dataset):\n","    dataset[dataset < 0] = 0\n","    dataset[dataset > 1] = 1\n","    return dataset"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wquWhjq3THhT","colab_type":"text"},"source":["##**1.3 Chuẩn bị dataset**"]},{"cell_type":"code","metadata":{"id":"7RXVPU_HTk30","colab_type":"code","outputId":"b605cafe-9565-4009-a49f-9224c89ade15","executionInfo":{"status":"ok","timestamp":1591264592226,"user_tz":-420,"elapsed":23577,"user":{"displayName":"Tien LE KHAC","photoUrl":"","userId":"18298916241916904857"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["## Prepare Dataset\n","g_train_data = pd.read_csv(g_trainset_path)\n","d_train_data = pd.read_csv(d_trainset_path)\n","\n","# All attack record in train_data\n","raw_attack = preprocess_malicious_data(g_train_data, ATTACK_CATEGORY)\n","# All normal record in train_data\n","del d_train_data[\"class\"]\n","normal = np.array(d_train_data)\n","\n","# batch_size, epoch, critic_iters\n","NUMBER_OF_FEATURES = len(d_train_data.columns)\n","BATCH_SIZE = 64\n","MAX_EPOCH = 50\n","\n","# Create batch of attack traffic\n","batch_attack = create_batch2(raw_attack,BATCH_SIZE)\n","\n","print(\"Amout of Generator Trainset:\", g_train_data.shape[0])\n","print(\"Amout of Discriminator Trainset:\", d_train_data.shape[0])"],"execution_count":10,"outputs":[{"output_type":"stream","text":["Amout of Generator Trainset: 29315\n","Amout of Discriminator Trainset: 33672\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"WW-x_fnYIgBL","colab_type":"code","outputId":"d1daf254-633b-45da-8522-bfc03be470bd","executionInfo":{"status":"ok","timestamp":1591264592228,"user_tz":-420,"elapsed":23566,"user":{"displayName":"Tien LE KHAC","photoUrl":"","userId":"18298916241916904857"}},"colab":{"base_uri":"https://localhost:8080/","height":306}},"source":["print(raw_attack)\n","\n","print(f\"\\n{100*'='}\\n\")\n","\n","print(normal)"],"execution_count":11,"outputs":[{"output_type":"stream","text":["[[0.         0.         0.24637681 ... 1.         0.         0.        ]\n"," [0.         0.         0.02898551 ... 1.         0.         0.        ]\n"," [0.         0.         0.60869565 ... 1.         0.         0.        ]\n"," ...\n"," [0.         0.         0.26086957 ... 0.         1.         1.        ]\n"," [0.         0.         0.02898551 ... 1.         0.         0.        ]\n"," [0.         0.         0.02898551 ... 1.         0.         0.        ]]\n","\n","====================================================================================================\n","\n","[[0.         0.         0.04347826 ... 0.         0.         0.6       ]\n"," [0.         0.         0.04347826 ... 0.         0.         0.        ]\n"," [0.         0.         0.04347826 ... 0.         0.         0.        ]\n"," ...\n"," [0.         0.         0.04347826 ... 0.         0.         0.        ]\n"," [0.65384078 0.         0.79710145 ... 0.         0.19       0.64      ]\n"," [0.         0.         0.         ... 0.         0.         0.        ]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"otbVJEAzcTv4","colab_type":"text"},"source":["# **2. Định nghĩa Model**"]},{"cell_type":"markdown","metadata":{"id":"NsF64RDMaBFc","colab_type":"text"},"source":["##2.1. Tạo Model"]},{"cell_type":"code","metadata":{"id":"bGSsXJNlUFrb","colab_type":"code","colab":{}},"source":["# Instantiate Model Class\n","D_G_INPUT_DIM = NUMBER_OF_FEATURES        # Number of dimension from dataset\n","G_OUTPUT_DIM = NUMBER_OF_FEATURES         # Number of dimension from dataset\n","D_OUTPUT_DIM = 1                          # A value [0,1] mean it is Normal Traffic or Arnomaly Traffic\n","LAMBDA = 10                               # Gradient penalty lambda hyperparameter\n","CRITIC_ITERS = 5                          # For WGAN and WGAN-GP, number of critic iters per gen iter\n","CLAMP = 0.01\n","\n","# Read BlackBoxIDS model\n","ids_model = Blackbox_IDS(D_G_INPUT_DIM,2)\n","# param = th.load(IDS_ModelPath)\n","\n","# Load Model for Attack Type\n","if ATTACK_CATEGORY == 'DOS':\n","  param = th.load(IDS_DOS_ModelPath)\n","if ATTACK_CATEGORY == 'U2R_AND_R2L':\n","  param = th.load(IDS_U2R_AND_R2L_ModelPath)\n","\n","\n","ids_model.load_state_dict(param)\n","\n","# Create GAN Models\n","generator = Generator(D_G_INPUT_DIM,G_OUTPUT_DIM)\n","discriminator = Discriminator(D_G_INPUT_DIM,D_OUTPUT_DIM)\n","\n","# Cross Entropy Loss  \n","# loss_f = nn.CrossEntropyLoss()\n","\n","# Adam Optimizer \n","learning_rate = 0.0001\n","optimizer_G = optim.RMSprop(generator.parameters(), lr=learning_rate)\n","optimizer_D = optim.RMSprop(discriminator.parameters(), lr=learning_rate)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"uxaOwvpkaExE","colab_type":"text"},"source":["##2.2. Hàm tính Penalty"]},{"cell_type":"code","metadata":{"id":"Y8hcustBttFV","colab_type":"code","colab":{}},"source":["# Compute Gradient Penalty\n","def compute_gradient_penalty(D, normal_t, attack_t):\n","    alpha = th.Tensor(np.random.random((normal_t.shape[0], 1)))\n","    between_n_a = (alpha * normal_t + ((1 - alpha) * attack_t)).requires_grad_(True)\n","    d_between_n_a = D(between_n_a)\n","    adv = V(th.Tensor(normal_t.shape[0], 1).fill_(1.0), requires_grad=False)\n","\n","    gradients = autograd.grad(\n","        outputs=d_between_n_a,\n","        inputs=between_n_a,\n","        grad_outputs=adv,\n","        create_graph=True,\n","        retain_graph=True,\n","        only_inputs=True,\n","    )[0]\n","    gradients = gradients.view(gradients.size(0), -1)\n","    gradient_penalty = ((gradients.norm(2, dim=1) - 1) ** 2).mean()\n","    return gradient_penalty"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nDp5Uy_HaShp","colab_type":"text"},"source":["# **3. Run Model**"]},{"cell_type":"code","metadata":{"id":"NblNcYrJaYy-","colab_type":"code","outputId":"a4ce34a9-7b68-4797-a0a1-fc79cc03298b","executionInfo":{"status":"ok","timestamp":1591265647819,"user_tz":-420,"elapsed":12575,"user":{"displayName":"Tien LE KHAC","photoUrl":"","userId":"18298916241916904857"}},"colab":{"base_uri":"https://localhost:8080/","height":221}},"source":["d_losses,g_losses = [],[]\n","ids_model.eval()\n","generator.train()\n","discriminator.train()\n","cnt = -5\n","print(\"IDSGAN start training\")\n","for epoch in range(MAX_EPOCH):\n","    print(\"*\"*100)\n","    print(f\"---Epoch {epoch}---\")\n","    # Comment - Mỗi train epoch tạo batch 1 lần\n","    batch_normal = create_batch2(normal,BATCH_SIZE)\n","    run_g_loss = 0.\n","    run_d_loss = 0.\n","    c=0\n","    for bn in batch_normal:\n","        normal_b = th.Tensor(bn.astype(\"float64\"))\n","        #  Train Generator\n","        for p in discriminator.parameters():  \n","            p.requires_grad = False\n","    \n","        optimizer_G.zero_grad()\n","        \n","        # random_traffic - Lay tu raw_attack ngau nhien n=BATCH_SIZE phan tu\n","        attack_traffic = raw_attack[np.random.randint(0,len(raw_attack),BATCH_SIZE)]\n","        noise = MakeNoise(ATTACK_CATEGORY, BATCH_SIZE, D_G_INPUT_DIM)\n","        attack_traffic_noised = RestrictOutput(attack_traffic + noise)\n","        z = V(th.Tensor(attack_traffic_noised))\n","        adversarial_attack = generator(z)\n","\n","        D_pred = discriminator(adversarial_attack)\n","              \n","        g_loss = -th.mean(D_pred)\n","\n","        g_loss.backward()\n","        optimizer_G.step()\n","        \n","        run_g_loss += g_loss.item()\n","        # Train Discreminator\n","        for p in discriminator.parameters(): \n","            p.requires_grad = True\n","        \n","        for c in range(CRITIC_ITERS):\n","            optimizer_D.zero_grad()\n","            for p in discriminator.parameters():\n","                p.data.clamp_(-CLAMP, CLAMP)\n","                \n","            attack_traffic = raw_attack[np.random.randint(0,len(raw_attack),BATCH_SIZE)]\n","            noise = MakeNoise(ATTACK_CATEGORY, BATCH_SIZE, D_G_INPUT_DIM)\n","            attack_traffic_noised = RestrictOutput(attack_traffic + noise)\n","            z = V(th.Tensor(attack_traffic_noised))\n","            adversarial_attack = generator(z).detach()\n","\n","\n","\n","            ids_input = th.cat((adversarial_attack,normal_b))\n","\n","            l = list(range(len(ids_input)))\n","            np.random.shuffle(l)\n","            ids_input = V(th.Tensor(ids_input[l]))\n","            ids_pred = ids_model(ids_input)\n","            ids_pred_lable = th.argmax(nn.Sigmoid()(ids_pred),dim = 1).detach().numpy()\n","\n","            pred_normal = ids_input.numpy()[ids_pred_lable==0]\n","            pred_attack = ids_input.numpy()[ids_pred_lable==1]\n","            \n","            if len(pred_attack) == 0:\n","                cnt += 1\n","                break\n","            D_noraml = discriminator(V(th.Tensor(pred_normal)))\n","            D_attack= discriminator(V(th.Tensor(pred_attack)))\n","            \n","            loss_normal = th.mean(D_noraml)\n","            loss_attack = th.mean(D_attack)\n","            gradient_penalty = compute_gradient_penalty(discriminator, normal_b.data, adversarial_attack.data)\n","            \n","            d_loss =  loss_attack - loss_normal #+ LAMBDA * gradient_penalty\n","\n","            d_loss.backward()\n","            optimizer_D.step()\n","            run_d_loss += d_loss.item()\n","\n","    d_losses.append(run_d_loss/CRITIC_ITERS)\n","    g_losses.append(run_g_loss)\n","    print(f\"G_Loss = {run_g_loss} \\t D_Loss = {run_d_loss/CRITIC_ITERS}\")\n","    if cnt >= 100:\n","        print(\"Not exist predicted attack traffic\")\n","        break\n","print(\"IDSGAN finish training\")\n"],"execution_count":23,"outputs":[{"output_type":"stream","text":["IDSGAN start training\n","****************************************************************************************************\n","---Epoch 0---\n","G_Loss = -65.90130966901779 \t D_Loss = -0.24715787172317505\n","****************************************************************************************************\n","---Epoch 1---\n","G_Loss = -65.89556980133057 \t D_Loss = -0.2444101095199585\n","****************************************************************************************************\n","---Epoch 2---\n","G_Loss = -65.90236055850983 \t D_Loss = -0.2540999412536621\n","Not exist predicted attack traffic\n","IDSGAN finish training\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vdAqWOzkHfSd","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":265},"outputId":"020ea735-6920-4449-f7c7-59c2da07ae8e","executionInfo":{"status":"ok","timestamp":1591265655146,"user_tz":-420,"elapsed":1370,"user":{"displayName":"Tien LE KHAC","photoUrl":"","userId":"18298916241916904857"}}},"source":["# Show Graph\n","plt.plot(d_losses,label = \"D_loss\")\n","plt.plot(g_losses, label = \"G_loss\")\n","plt.legend()\n","plt.show()\n"],"execution_count":24,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"V-lqMy4i0SlO","colab_type":"code","colab":{}},"source":["# Save Model\n","TodayStr = datetime.now(time_zone).strftime(\"%Y.%m.%d-%H.%M\")\n","th.save(ids_model.state_dict(), (SavedModelPath + \"IDS_\" + ATTACK_CATEGORY + '-' + TodayStr + \".pth\"))\n","\n","th.save(generator.state_dict(), GAN_SavedModelPath + \"Generator_\" + ATTACK_CATEGORY + '-'  + TodayStr + \".pth\")\n","th.save(discriminator.state_dict(), GAN_SavedModelPath + \"Discriminator\" + ATTACK_CATEGORY + '-'  + TodayStr + \".pth\")"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mwWugTozppL5","colab_type":"text"},"source":["The Saved Model stored in [Google Drive - GAN Model](https://drive.google.com/drive/u/1/folders/1VNFW-k5SbR0eGsJ_np3U-W3Rcz_n4I8N)\n","\n","The Result of Code stored in [Github - Thesis](https://github.com/thetinybug/thesis-IDSGAN)"]}]}